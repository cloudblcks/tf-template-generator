resource "aws_ecs_cluster" "ecs_cluster_name-{{ uid }}" {
  name = var.ecs_cluster_name-{{ uid }}
}

# ALB Security Group (Traffic Internet -> ALB)
resource "aws_security_group" "load-balancer-{{ uid }}" {
  description = "Controls access to the ALB"
  vpc_id      = aws_vpc.vpc-{{ vpc_uid }}.id

  ingress {
    from_port   = 80
    to_port     = 80
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  ingress {
    from_port   = 443
    to_port     = 443
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

# ECS Security group (traffic ALB -> ECS, ssh -> ECS)
resource "aws_security_group" "ecs-{{ uid }}" {
  description = "Allows inbound access from the ALB only"
  vpc_id      = aws_vpc.vpc-{{ vpc_uid }}.id
  ingress {
    from_port       = 0
    to_port         = 0
    protocol        = "-1"
    security_groups = [aws_security_group.load-balancer-{{ uid }}.id]
  }

  ingress {
    from_port   = 22
    to_port     = 22
    protocol    = "tcp"
    cidr_blocks = ["0.0.0.0/0"]
  }

  egress {
    from_port   = 0
    to_port     = 0
    protocol    = "-1"
    cidr_blocks = ["0.0.0.0/0"]
  }
}

resource "aws_iam_role" "ecs-{{ uid }}-host-role" {
  assume_role_policy =<<EOT
{
  "Version": "2008-10-17",
  "Statement": [
    {
      "Action": "sts:AssumeRole",
      "Principal": {
        "Service": [
          "ecs.amazonaws.com",
          "ec2.amazonaws.com"
        ]
      },
      "Effect": "Allow"
    }
  ]
}
  EOT
{% if s3_buckets|length > 0  %}
  inline_policy {
    name = "ecs-{{ uid }}-host-role-inline-policy"

    policy =<<EOT
{
  "Version": "2008-10-17",
  "Statement": [
    {
        "Effect": "Allow",
        "Action": ["s3:ListBucket", "s3:*Object"],
        "Resource": [
        {% for bucket in s3_buckets %}
        "${aws_s3_bucket.bucket-{{ bucket.uid }}.arn}",
        {% endfor %}
        ]
    }
  ]
}
  EOT
  }
  {% endif %}
}

resource "aws_iam_instance_profile" "ecs-{{ uid }}_instance_profile" {
  path = "/"
  role = aws_iam_role.ecs-{{ uid }}-host-role.name
}

resource "aws_key_pair" "ssh_key-{{ uid }}" {
  public_key = file(var.ssh_pubkey_file-{{ uid }})
}

resource "aws_launch_configuration" "ecs-{{ uid }}_launch_configuration" {
  name                        = var.ecs_cluster_name-{{ uid }}
  image_id                    = var.ami-{{ uid }}
  instance_type               = var.instance_type-{{ uid }}
  security_groups             = [aws_security_group.ecs-{{ uid }}.id]
  iam_instance_profile        = aws_iam_instance_profile.ecs-{{ uid }}_instance_profile.name
  key_name                    = aws_key_pair.ssh_key-{{ uid }}.key_name
  associate_public_ip_address = true
  user_data                   = "#!/bin/bash\necho ECS_CLUSTER='${var.ecs_cluster_name-{{ uid }}}' > /etc/ecs/ecs.config"
}


resource "aws_ecs_task_definition" "task_definition-{{ uid }}" {
  family                = var.task_definition_family-{{ uid }}
  container_definitions = <<EOT
  [
  {
    "name": "${var.container_name-{{ uid }}}",
    "image": "${var.docker_image_url-{{ uid }}_django}",
    "essential": true,
    "cpu": $var.container_cpu-{{ uid }},
    "memory": $var.container_cpu-{{ uid }},
    "links": [],
    "portMappings": [/*
      {
        "containerPort": 8000,
        "hostPort": 0,
        "protocol": "tcp"
      }
    */],
    "environment": [],
    "mountPoints": [/*
      {
        "containerPath": "/usr/src/minerva/static",
        "sourceVolume": "static_volume"
      }
    */],
    "logConfiguration": {
      "logDriver": "awslogs",
      "options": {
        "awslogs-group": "/ecs/${var.container_name-{{ uid }}}",
        "awslogs-region": "${region}",
        "awslogs-stream-prefix": "${var.container_name-{{ uid }}}_log_stream"
      }
    }
  }
]
  EOT
  volume {
    name      = "${var.container_volume_name-{{ uid }}}"
    host_path = "${var.container_volume_path-{{ uid }}}"
  }
}

resource "aws_iam_role" "ecs-{{ uid }}-service-role" {
  assume_role_policy = <<EOT
{
  "Version": "2008-10-17",
  "Statement": [
    {
      "Action": "sts:AssumeRole",
      "Principal": {
        "Service": [
          "ecs.amazonaws.com",
          "ec2.amazonaws.com"
        ]
      },
      "Effect": "Allow"
    }
  ]
}
  EOT
}

resource "aws_iam_role_policy" "ecs-{{ uid }}-service-role-policy" {
  policy = <<EOT
{
  "Version": "2012-10-17",
  "Statement": [
    {
      "Effect": "Allow",
      "Action": [
        "elasticloadbalancing:Describe*",
        "elasticloadbalancing:DeregisterInstancesFromLoadBalancer",
        "elasticloadbalancing:RegisterInstancesWithLoadBalancer",
        "ec2:Describe*",
        "ec2:AuthorizeSecurityGroupIngress",
        "elasticloadbalancing:RegisterTargets",
        "elasticloadbalancing:DeregisterTargets"
      ],
      "Resource": [
        "*"
      ]
    }
  ]
}
  EOT

  role   = aws_iam_role.ecs-{{ uid }}-service-role.id
}


# Production Load Balancer
resource "aws_lb" "aws_alb-{{ uid }}" {
  load_balancer_type = "application"
  internal           = false
  security_groups    = [aws_security_group.load-balancer-{{ uid }}.id]
  subnets            = [aws_subnet.public-subnet-1-{{ vpc_uid }}.id, aws_subnet.public-subnet-2-{{ vpc_uid }}.id]
}

/*data "aws_acm_certificate" "ssl_certificate" {
  domain   = var.domain_name
}*/

# Target group
resource "aws_alb_target_group" "default-target-group-{{ uid }}" {
  port     = 80
  protocol = "HTTP"
  vpc_id   = aws_vpc.vpc-{{ vpc_uid }}.id

  health_check {
    path                = var.healthcheck_path-{{ uid }}
    port                = "traffic-port"
    healthy_threshold   = 5
    unhealthy_threshold = 2
    timeout             = 2
    interval            = 5
    matcher             = "200"
  }
}


# Listener (redirects traffic from the load balancer to the target group)
resource "aws_alb_listener" "ecs-alb-http-listener-{{ uid }}" {
  load_balancer_arn = aws_lb.aws_alb-{{ uid }}.id
  port              = "443"
  protocol          = "HTTPS"
  ssl_policy        = "ELBSecurityPolicy-2016-08"
#  certificate_arn   = data.aws_acm_certificate.ssl_certificate.arn

  default_action {
    type             = "forward"
    target_group_arn = aws_alb_target_group.default-target-group-{{ uid }}.arn
  }
}


resource "aws_ecs_service" "ecs_service-{{ uid }}" {
  cluster         = aws_ecs_cluster.ecs_cluster_name-{{ uid }}.id
  task_definition = aws_ecs_task_definition.task_definition-{{ uid }}.arn
  iam_role        = aws_iam_role.ecs-{{ uid }}-service-role.arn
  desired_count   = var.app_count-{{ uid }}
  depends_on      = [aws_alb_listener.ecs-alb-http-listener-{{ uid }}, aws_iam_role_policy.ecs-{{ uid }}-service-role-policy]

  load_balancer {
    target_group_arn = aws_alb_target_group.default-target-group-{{ uid }}.arn
    container_name   = var.container_name-{{ uid }}
    container_port   = 80
  }
}


###############
# Autoscaling
###############
resource "aws_autoscaling_group" "autoscaling_group-{{ uid }}" {
  min_size             = var.autoscale_min-{{ uid }}
  max_size             = var.autoscale_max-{{ uid }}
  desired_capacity     = var.autoscale_desired-{{ uid }}
  health_check_type    = "EC2"
  launch_configuration = aws_launch_configuration.ecs-{{ uid }}_launch_configuration.name
  vpc_zone_identifier  = [aws_subnet.private-subnet-1-{{ vpc_uid }}.id, aws_subnet.private-subnet-2-{{ vpc_uid }}.id]
}
